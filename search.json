[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biyoinformatik",
    "section": "",
    "text": "Önsöz\nMerhabalar! Lisans üstü seviyede verilen İleri Biyoinformatik dersine hoşgeldiniz!",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "index.html#ders-hakkında-ön-bilgi",
    "href": "index.html#ders-hakkında-ön-bilgi",
    "title": "Biyoinformatik",
    "section": "Ders hakkında ön bilgi",
    "text": "Ders hakkında ön bilgi\nDersimiz çoğunlukla yüz yüze işlenecektir. Ancak akademik programıma bağlı olarak çevrimiçi işleme opsiyonunu da kullanacağız.\nDers kapsamında Mersin Üniversitesi Fen Fakültesi 30 kişilik bilgisayar laboratuvarını kullanacağız.",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "index.html#dersin-işlenme-yöntemi",
    "href": "index.html#dersin-işlenme-yöntemi",
    "title": "Biyoinformatik",
    "section": "Dersin işlenme yöntemi",
    "text": "Dersin işlenme yöntemi\nDers kapsamında Türkiye Ulusal e-Bilişim Altyapısı’nın (TRUBA) yüksek başarımlı bilgisayar sistemlerini kullanacağız. Bu imkanı bize sağlayarak, öğrencilere eğitim hesapları açtıkları için teşekkür ederiz.",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "index.html#konular",
    "href": "index.html#konular",
    "title": "Biyoinformatik",
    "section": "Konular",
    "text": "Konular\nAltyapı kısmı, TRUBA sistemine nasıl bağlanılacağı, komutların kullanımı ve TRUBA sisteminde iş göndermek için gerekli betiklerin tanıtımına ayrılmıştır.\nBirinci kısımda genel olarak TRUBA sistemi ve komut satırı üzerine bilgiler verlecektir. 1  Truba, TRUBA sisteminin tanıtımını ve sisteme nasıl bağlanacağımız hakkında gerekli bilgileri içermektedir. Daha sonra 3  Komut satırı kullanımı kısmında ise, TRUBA sisteminin ve linux komut satırının kullanımı hakkında gerekli bilgiler ve pratikler verilmiştir.\nİkinci kısımda ise, kullanılacak verinin niteliği, bu verinin yeni Nesil dizileme teknolojileri ile eldesi, saklanması ve en sonunda da elde edilmesi anlatılacaktır.\nÜçüncü kısımda ise DNA hizalama ve varyant çağırma üzerine temel bilgiler aktarılmıştır.\nDördüncü kısımda Metagenomik yöntemler irdelencektir.\nBeşinci kısımda filogenetik\nAltıncı kısımda ise RNA dizleme ve bu verinin analizi anlatılacaktır.",
    "crumbs": [
      "Önsöz"
    ]
  },
  {
    "objectID": "00-setup/01-truba.html",
    "href": "00-setup/01-truba.html",
    "title": "1  Truba",
    "section": "",
    "text": "Ders kapsamında TRUBA sunucularını kullanacağız. Bu imkanı bize sundukları için teşekkür ederiz.\nÖncelikle TRUBA internet sitesine giderek sistemi inceleyelim.\nTRUBA kaynaklarına üniversite içerisinden rahatlıkla bağlanabilirsiniz, ancak üniversite dışından bağlanmak için ise bilgisayarınza OpenVPN programını kurmanız gerekmektedir.\nAyrıntılar için Kurulum kılavuzunu inceleyin ve bilgisayarınza uygun olan kılavuz ile OpenVPN kurulumunu tamamlayınız.\nKurulum tamamlandıktan sonra, TRUBA tarafından size gönderilen kullanıcı ismi ve şifreniz ile, OpenVPN sistemine bağlanmanız gerekmektedir. Ardından, mobaxterm ile TRUBA sistemine bağlanabiliriz.\nNormalde uzak bir bilgisyara bağlanma sürecini şöyle özetleyebiliriz. İnternet üzerinde, sizin bilgisyarınız ve uzak bilgisayar arasında şifreli bir tünel (ssh) bağlantısı kurulmaktadır. Bunu Şekil 1.1’de rahatlıkla görebiliriz. Bu şekilde yapılan bir bağlantıda, TRUBA sistemine şifreli bir tünel açılmaktadır.\n\n\n\n\n\n\n\n\ng\n\n\n\nYerel Bilgisayar\n\nYerel Bilgisayar\n\n\n\nTRUBA\n\nTRUBA\n\n\n\nYerel Bilgisayar-&gt;TRUBA\n\n\n\n\n\n\n\n\nŞekil 1.1: ULAKBİM ağı içerisinden, TRUBA’ya doğrudan ssh bağlantısı kurabilirsiniz.\n\n\n\n\n\nAncak, ULAKBİM üzerinden yapılmayan bağlantılar güvenli olmayabir. Bu tip bilgisayar sistemleri yoğunlukla saldırı altındadır. Bu yüzden güvenli bir bağlantı oluşturmak için farklı yöntemler kullanılabilir. Bazı sunucu sistemleri iki faktörlü doğrulama kullanırken, TRUBA sistemi, ULAKBİM dışındaki bağlantılarda öncelikle sanal ağa bağlanmanızı zorunlu tutmaktadır. Bağlantı güvenliği için öncelikle OpenVPN ile sanal ağa, oradan da TRUBA’ya bağlanıyoruz (Şekil 1.2).\n\n\n\n\n\n\n\n\ng\n\n\n\nYerel Bilgisayar\n\nYerel Bilgisayar\n\n\n\nOpenVPN\n\nOpenVPN\n\n\n\nYerel Bilgisayar-&gt;OpenVPN\n\n\n\n\n\nTRUBA\n\nTRUBA\n\n\n\nOpenVPN-&gt;TRUBA\n\n\n\n\n\n\n\n\nŞekil 1.2: Üniversite ağı dışından yapacağınız bağlantılarda öncelikle OpenVPN üzerinde ULAKBİM sanal ağına bağlanmalısınız.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Truba</span>"
    ]
  },
  {
    "objectID": "00-setup/02-system.html",
    "href": "00-setup/02-system.html",
    "title": "2  Sistem kurulumu",
    "section": "",
    "text": "2.1 Windows işletim sistemi\nUzaktaki sunucuya bağlanmak için Mobaxterm yazılımını kullanabiliriz.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistem kurulumu</span>"
    ]
  },
  {
    "objectID": "00-setup/02-system.html#mac-işletim-sistemi",
    "href": "00-setup/02-system.html#mac-işletim-sistemi",
    "title": "2  Sistem kurulumu",
    "section": "2.2 Mac işletim sistemi",
    "text": "2.2 Mac işletim sistemi\nMac sistemler üzerine kullanacağımız bütün biyoinformatik araçları kurma imkanımız bulunmaktadır. Bunun için Mac tuşu ile boşluk tuşuna basıp Spotlight ekranını açarak (Şekil 2.1), terminal yazınız ve açılan penceyere aşağıdaki kodu yazınız.\nxcode-select --install\n\n\n\n\n\n\nŞekil 2.1: Mac üzerinde spotlight ekranı\n\n\n\nBir süre bekledikten sonra gerekli programlar kurulacaktır. Artık terminal programı üzerinden gerek uzak bilgisayarlarlar ssh bağlantısı, gerekse de kullanılacak biyoinformatik araçların kurulumunu gerçekleştirebilirsiniz.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistem kurulumu</span>"
    ]
  },
  {
    "objectID": "00-setup/02-system.html#ubuntu-alt-sistemi-bakımı",
    "href": "00-setup/02-system.html#ubuntu-alt-sistemi-bakımı",
    "title": "2  Sistem kurulumu",
    "section": "2.3 Ubuntu alt sistemi bakımı",
    "text": "2.3 Ubuntu alt sistemi bakımı\nSisteminiz ara ara güncellemelisiniz. Öncelikle kullandığımız paketlerin en güncel versiyonlarını denetleyelim:\nsudo apt update\nDaha sonra sistemi güncelleyelim:\nsudo apt upgrade\n\n2.3.1 Ubuntu sisteminde kullanıcı ismi sorunu\nSorunlardan bir tanesi ön tanımlı kullanıcının root olmasıydı. Kullandığımız sistemler çok kullanıcılı sistemler. Her kullanıcının bazı hakları var. root kullanıcısı ise, en güçlü kullanıcı ve her şeyi yapma yeteneği var.\nO yüzden bu kullanıcı her zaman kullanmıuoruz. Eğer ubuntu alt sistemi root kullanıcısı ile açılıyorsa bunu değiştirmeliyiz.\nÖnce ubuntu ekranını açalım ve yeni bir kullancı eklediğimizden emin olalım:\nsudo adduser KULLANICI\nBu şekilde yeni kullanıcı ekleyelim. Aşağıdaki gibi bir ekran karşımıza çıkacak (Şekil 2.2):\n\n\n\n\n\n\nŞekil 2.2: Ubuntu alt sisteminde kullanıcı ekleme\n\n\n\nŞifrenizi girin (ancak imleç haraket etmeyecek, endişe etmeyin) ve tekrar girin.\nKullanıcıyı oluşturduktan sonra, Windows’ta arama kısmına gelerek Komut İstemi yazın. bu da aslında Windows’un komut satırı arayüzü. Burada aşağıdaki satırı yazarak, yeni kullanıcınızı ön tanımlı olarak ekleyebilirsiniz.\nubuntu config --default-user KULLANICI",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Sistem kurulumu</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html",
    "href": "00-setup/03-command-line.html",
    "title": "3  Komut satırı kullanımı",
    "section": "",
    "text": "3.1 Linux’ta dosya yapısı\nGirdiğimiz ekran aslında bizim kullanıcı klasörümüz olacaktır. TRUBA - ve genel olarak linux sistemleri - çok kullancılı bilgisayarlardır. Bunun anlamı, sistem üzerinde farklı kullanıcılar bulunmakta ve TRUBA sistemi de bütün işleyişi kontrol etmektedir. Her kullanıcı, kendi klasörü içerisinde bütün yazma (W), okuma (R), ve çalıştırma (X) haklarına sahiptir. Ancak diğer kullanıcıların klasörlerinde, ve sistem ile ilgili klasörlerde çok kısıtlı haklara sahip olabilirler.\nLinux işletim sisteminde dosya yapısı kök / işareti ile başlar. Bu işaret aynı zamanda klasörleri birbirinden ayrır.\nBulunduğumuz klasör konumunu öğrenmek için pwd (print working directory) komutunu yazalım:\nBenim ekranımda bu komutun çıktısı şöyle oldu:\nhome klasörü, kullanıcıların klasörlerinin bulunduğu konumu işaret etmektedir.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#linuxta-dosya-yapısı",
    "href": "00-setup/03-command-line.html#linuxta-dosya-yapısı",
    "title": "3  Komut satırı kullanımı",
    "section": "",
    "text": "pwd\n\n/truba/home/egitim",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#klasör-içeriğini-görüntüleme",
    "href": "00-setup/03-command-line.html#klasör-içeriğini-görüntüleme",
    "title": "3  Komut satırı kullanımı",
    "section": "3.2 Klasör içeriğini görüntüleme",
    "text": "3.2 Klasör içeriğini görüntüleme\nŞimdi ls komutunu yazalım. Bu komut bulunduğumuz klasördeki dosyaları ve klasörleri gösterir.\nEğer daha ayrıntılı bilgi istersek, ls -l komutunu kullanabiliriz. Bu komut, dosya ve klasörleri listeler; yime istersek klasör adı belirtebiliriz:\nls -l\nBenim ekranımda şöyle bir görüntü çıktı (Şekil 3.1).\n\n\n\n\n\n\nŞekil 3.1: ls -l komutu çıktısı\n\n\n\nEn çok aşağıdaki komutu kullanıyorm. Bu sayede klasörleri son değiştirme sırasına göre gösterebiliyoruz ve bayt bilgisini okunabilir hale getiriyoruz:\nls -ltrh",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#klasör-oluşturma",
    "href": "00-setup/03-command-line.html#klasör-oluşturma",
    "title": "3  Komut satırı kullanımı",
    "section": "3.3 Klasör oluşturma",
    "text": "3.3 Klasör oluşturma\nŞimdi komut satırını öğrenmek için gerekli olan dosyaları yükleyeceğimiz klasörü oluşturalum. mkdir komutu klasör oluşturmak için kullanılır. İlk olarak kendi ismimizi kullanarak bir klasör oluşturalım:\nKlasörü kendi ismimizde oluşturalım:\nmkdir emrah",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#klasörlerde-hareket",
    "href": "00-setup/03-command-line.html#klasörlerde-hareket",
    "title": "3  Komut satırı kullanımı",
    "section": "3.4 Klasörlerde hareket",
    "text": "3.4 Klasörlerde hareket\nBunun için cd komutunu kullanıyoruz:\ncd emrah\nŞimdi de pwd yazalım. Artık yeni oluşturduğunuz klasör içerisindesiniz.\nBir üst seviyeye çıkmak için cd .. yazın.\nAncak bu çalışma kapsamında şimdi kendi ismizle oluşturduğunuz klasöre gidiniz.\ncd emrah",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#temel-dosya-işlemleri",
    "href": "00-setup/03-command-line.html#temel-dosya-işlemleri",
    "title": "3  Komut satırı kullanımı",
    "section": "3.5 Temel dosya işlemleri",
    "text": "3.5 Temel dosya işlemleri\nBu kısımda öncelikle kullanacağımız veri setini indirelim:\nwget https://github.com/emrahkirdok/bioinformatics/raw/3defc4590bf8a351c30747061be5fde3924eae5d/00-setup/test-data.tar.gz\nKullandığımız wget komutu internet üzerindeki bir dosyayı indirmemizi sağlıyor.\nDosyaya bakalaım:\nls -ltrh \nBurada sıkıştırılmış bir arşiv dosyası indirdik, tar bu dosyanın arşivlendiğini, gz ise sıkıştırıldığın bize belitmektedir. Dosya rengi kırmızı çünkü sıkıştırılmış bir dosya.\nBu dosyayı açalım:\ntar -xzvf test-data.tar.gz\nOpsiyonlar:\n\nx arşiv dosyasını aç\nz arşiv dosyasının sıkıştırılmış bir dosya olduğunu belirtir, önce sıkıştırmayı açar\nv açtığı dosyaların isimlerini gösterir\nf çalışmak istediğimiz arşiv dosyasının ismi, veya tam yolu\n\nBakalım arşivi açmış mıyız?\nls -ltrh\nAçtığımız klasörü ls komutu ile inceleyebiliriz. Klasörün içinde değilsek klasör adını yazmalıyız; klasör adı yazmadığımız durumda her neredeysek oradaki dosyaları listeleyecektir:\nls -ltrh test-data\nBu klasör içerisine girelim:\ncd test-data\nKlasör içindekileri gösterelim:\nls -ltrh",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#dosya-içeriğini-gösterme",
    "href": "00-setup/03-command-line.html#dosya-içeriğini-gösterme",
    "title": "3  Komut satırı kullanımı",
    "section": "3.6 Dosya içeriğini gösterme",
    "text": "3.6 Dosya içeriğini gösterme\nBir dosya içeriğini ekrana yazdırmak istiyorsak, cat komutunu kullanmalıyız:\ncat ornek_fasta.fasta\nAncak dosya boyutumuz fazlaysa, bunu kullanamayız. Çünkü her şeyi ekrana yazdırır. Örnek olarak aşaüıdaki dosya uzun bir dosya:\ncat ornek_fastq.fastq\nDosyanın ilk 10 satırını ekrana yazdıralım:\nhead  -n 10 ornek_fastq.fastq\nSon 10 satırı yazdıralım\ntail -n 10 ornek_fastq.fastq\nAncak bu komutlar dosya içeriğini ekrana yazdırır.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#dosyaları-less-ile-inceleme",
    "href": "00-setup/03-command-line.html#dosyaları-less-ile-inceleme",
    "title": "3  Komut satırı kullanımı",
    "section": "3.7 Dosyaları less ile inceleme",
    "text": "3.7 Dosyaları less ile inceleme\nAma dosyaları ekrana yazdırmak yerine incelemek istersek, less komutunu kullanmamız gerekecektir:\nless  ornek_fastq.fastq\nOk tuşları ile dosyada yukarı ve aşağı hareket edebilirsiniz. Bu programdan çıkmak için q tuşuna basın.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#tarihçeyi-elde-etmek",
    "href": "00-setup/03-command-line.html#tarihçeyi-elde-etmek",
    "title": "3  Komut satırı kullanımı",
    "section": "3.8 Tarihçeyi elde etmek",
    "text": "3.8 Tarihçeyi elde etmek\nYazdığımız komutların tarihçesini elde etmek istersel history komutunu kullanabiliriz. Bunu protokolünüzde kullandığnız kodları kaydetmek için kullanabilisiniz.\nhistory",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#komut-çıktısını-yönlendirme",
    "href": "00-setup/03-command-line.html#komut-çıktısını-yönlendirme",
    "title": "3  Komut satırı kullanımı",
    "section": "3.9 Komut çıktısını yönlendirme",
    "text": "3.9 Komut çıktısını yönlendirme\nUnix/Linux sistemlerinin en önemli özelliklerinden bir tanesi, bir dosyadan elde edilen çıktıyı başka bir dosyaya yönlendirme. Bu sayede, elde ettiğiniz sonuçları dosyalara aktarabilirsiniz. Mesela tarihçeyi, tarihce.txt dosyasına aktaralım:\nhistory &gt; tarihce.txt\nŞimdi ls -ltrh ile inceleyim.\nBir tarihce.txt isimli dosyanın oluşmuş olması gerekli.\n\n\n\n\n\n\nVarolan dosyanın üzerine yazma\n\n\n\nEğer &gt; kullanırsanız, ve varolan bir dosyayı hedef gösterirseniz, o dosyanın üzerine yazmış olursunuz! Dosyanın içindeki eski bilgileri kaybederiz!\nEğer bu dosyayı silmeden ekleme yapmak istersenz, &gt;&gt; kullanın. Bu sayede varolan dosyayı silmez, sonuna ekler.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#bir-dosyayı-değiştirme-ve-güncelleme",
    "href": "00-setup/03-command-line.html#bir-dosyayı-değiştirme-ve-güncelleme",
    "title": "3  Komut satırı kullanımı",
    "section": "3.10 Bir dosyayı değiştirme ve güncelleme",
    "text": "3.10 Bir dosyayı değiştirme ve güncelleme\nŞu ana kadar varolan dosyalarla salt okunur işlemler yaptık. Bir dosyayı açmak ve değiştirmek için nano programını kullanabilirsiniz:\nnano tarihce.txt\nAşağıda bulunan kısayolları kullanarak işlemlerinizi gerçekleştirebilirsiniz:\nCTRL + K metni keser CTRL + U metni yapıştırır CTRL + O dosyayı kaydeder CTRL + X çıkar",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#dosya-ve-klasör-kopyalama",
    "href": "00-setup/03-command-line.html#dosya-ve-klasör-kopyalama",
    "title": "3  Komut satırı kullanımı",
    "section": "3.11 Dosya ve klasör kopyalama",
    "text": "3.11 Dosya ve klasör kopyalama\nİlk olarak örnek dosyamızı kopyalayarak işe başlayalım. cp komutu dosya ve klasörleri kopyalamak için kullanılır. Kopyalamak istediğimiz dosyanın tam konumunu bilmeliyiz ve eksiksiz olarak kodumuzda bu konumu vermeliyiz. Sondaki . işareti, bulunduğumuz yere bu klasörün kopyalanmasını sağlar.\nOluşturduğumuz dosyalardan bir tanesini kopyalayalım:\ncp tarihce.txt duzenlenmis-tarihce.txt\nls komutu ile yeni bir dosyanın oluştuğunu kontrol edin.\nBir dosyanın ismini değiştirmek veya dosyayı başka bir konuma taşımak için mv komutu kullanılır:\nmv tarihce.txt eski-tarihce.txt\nBurada dosyaları aynı klasöre kopyaladık veya taşıdırk İstersek başka klasörlere kopyalyabilr ya da taşıyabilirsiniz:\nMesela bir dosyayı kendi ev klasörümüze kopyalayım:\ncp eski-tarihce.txt /truba/home/egitim123/\nŞimdi klasörü kontrol edelim:\nls -ltrh /truba/home/egitim123/\nİstersek başka bir klasöre de taşıyabilirz:\nmv duzenlenmis-tarihce.txt /truba/home/egitim123/duzenlenmis-tarihce.txt\nÖncelikle çalışma klasörümüzü kontrol edelim:\nls -ltrh\nDikkat ederseniz artık o dosya artık yok.\nŞimdi de ev klasörümüzü kontrol edelikm:\nls -ltrh /truba/home/egitim123/\nBununla birlikte Linux üzerinde bazı klasörler için kısayollar bulunmaktadır.\n\n. bulunduğumuz klasör\n~ ev klasörümüz\n\nMesela az önce taşıdığımız dosyayı, ismini değiştirerek bulunduğumuz klasöre taşıyalım:\nmv ~/duzenlenmis-tarihce.txt ./yeni-tarihce.txt",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#dosyalarda-arama-yapmak",
    "href": "00-setup/03-command-line.html#dosyalarda-arama-yapmak",
    "title": "3  Komut satırı kullanımı",
    "section": "3.12 Dosyalarda arama yapmak",
    "text": "3.12 Dosyalarda arama yapmak\nİstersek grep komutu ile de bir dosya içerisinde arama yapabiliriz. Ancak bu sefer yaptığımız arama ekrana yazdırılacaktır. DNA-fasta.fna dosyasında, &gt; karakterine sahip satırları arayalım:\ngrep \"&gt;\" DNA-fasta.fna",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#bir-programın-çıktısını-başka-bir-programa-aktarma-boru-pipe",
    "href": "00-setup/03-command-line.html#bir-programın-çıktısını-başka-bir-programa-aktarma-boru-pipe",
    "title": "3  Komut satırı kullanımı",
    "section": "3.13 Bir programın çıktısını başka bir programa aktarma (boru, pipe)",
    "text": "3.13 Bir programın çıktısını başka bir programa aktarma (boru, pipe)\nDiğer önemli bir özellik ise, elimizdeki çıktıyı başka bir dosyaya yönlendirmek. Bunun için | karakterini kullanıyoruz.. Mesela bir önceki çıktıda bulunan &gt; karakterini silmek istediğimiz varsayalım.\nBu çıktıyı, sed isimli programa aktarıyoruz ve &gt; karakterini siliyoruz. Burada s karakter değiştirme komutunu simgeliyor.\ngrep \"&gt;\" DNA-fasta.fna | sed 's/&gt;//g'\nHatta sadece tür isimlerini alalım. Bunun için cut komutu ile sütünlara ayırıp, ikinci sütüundan itibaren bütün bilgiyi toplayalım:\ngrep \"&gt;\" DNA-fasta.fna | sed 's/&gt;//g' | cut -d \" \" -f 2-\nBu komutta -d opsiyonu ayırma karakterini simgeliyor. Burada boşluk kullanılmış. -f opsiyonu ise kullanılacak sütunları gösteriyor. Boşluk karakteri ile ayırdığımızda ikinci sütüundan itibaren bütün sütünları elde edelim anlamına gelmektedir.\nİstersek o çıktıyı bir dosyaya gönderebiliriz:\ngrep \"&gt;\" DNA-fasta.fna | sed 's/&gt;//g' | cut -d \" \" -f 2- &gt; dizi-isimleri.txt",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/03-command-line.html#for-döngüsü-kullanımı",
    "href": "00-setup/03-command-line.html#for-döngüsü-kullanımı",
    "title": "3  Komut satırı kullanımı",
    "section": "3.14 for döngüsü kullanımı",
    "text": "3.14 for döngüsü kullanımı\nFor döngüsü mantığına bakalım:\nBir klasör içerisinde 15 tane dosya var ve bu dosyaların hepsine uygulamak istediğimiz bir işlem var diyelim. Bu işlemi her dosyaya ayrı ayrı uygulamak yerine, for döngüsü kullanarak aynı anda hepsine uygulama yapılabilir. Dosyaların hepsini bir değişkende toplayalım, dosya isimlerini tek tek elle yazmamız gerekebilir, eğer bu dosya adlarında veya uzantılarında belli başlı ortak özellikler varsa, daha pratik bir kodlama yapabiliriz. Artık dosyaları tek tek yazmak yerine, değişken ismi ile bu dosyalar bütününü temsil edebiliriz. for döngüsü bu değişkendeki dosyaları tek tek alır, işlemi yapar, işlem tamamlanınca bir sonraki dosyaya geçer, işlemi yapar, tamamlar, ve bu şekilde artık işlem yapılacak dosya kalmayana kadar bu döngüyü devam ettirir.\nFor döngüsü şu şekilde kullanılır.\nBir değişken belirleyelim:\nFILES=\"a.txt b.txt c.txt\"\nElimizde 3 farklı dosya olsun. Bu üç dosyaya belirli işlemleri uygulamak istiyoruz. For döngüsü sayesinde bu işlemleri tek tek bütün dosyalara sırayla uygulayabiliriz:\nfor FILE in ${FILES}\ndo\n    echo ${FILE}\ndone\nBu betik, öncelikle FILES içersisindeki dosyaları sırayla FILE içersine atacak. ve do kısmından sonra gelen adımı uygulayacak.\nFor döngüsü özet:\nKlasördeki değişkendeki her bir dosya için; Klasöre işlem uygula, Dosyaların hepsi işlenince bitir.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Komut satırı kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/04-markdown-kullanim.html",
    "href": "00-setup/04-markdown-kullanim.html",
    "title": "4  Markdown Kullanımı",
    "section": "",
    "text": "4.1 Üzerinde Durulacak Konular",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Markdown Kullanımı</span>"
    ]
  },
  {
    "objectID": "00-setup/04-markdown-kullanim.html#üzerinde-durulacak-konular",
    "href": "00-setup/04-markdown-kullanim.html#üzerinde-durulacak-konular",
    "title": "4  Markdown Kullanımı",
    "section": "",
    "text": "Başlık ekleme\nAlt başlıkları ekleme\nVurgulamalar\nMadde ekleme ve sıralama\nBağlantı ekleme\nKod ekleme\nTablo ekleme\nGörsel ekleme\n\n\n4.1.1 Başlık Ekleme\nMarkdown kullanırken başlık eklemek amacıyla # kullanılır. Örneğin # Staj yazıldığı durumda başlık Staj şeklinde görünecektir.\n# Staj\n\n\n4.1.2 Alt Başlıklar Ekleme\nBaşlığın altına alt başlıklar eklenmek isteniyorsa, oluşturulacak her alt başlık için fazladan bir # eklenir. Örneğin staj başlığı altında zorunlu staj 1 yazılması istendiği zaman, bunun ## zorunlu staj 1 şeklinde yazılması gerekir.\nEğer zorunlu staj 1 alt başlığının alt başlıkları varsa yazılacak alt başlıklar için fazladan bir # daha eklenir. Örneğin bu alt başlıklardan biri 1. gün olsun. Bunun başlık şeklinde yazılması için ### 1. gün şeklinde yazılması gerekir.\n\n\n4.1.3 Vurgulamalar\nMarkdown kullanırken kelime ya da cümlelerin vurgulanması farklı şekillerde yapılabilir.\n\n4.1.3.1 Metni Kalın Şekilde Yazma\nKelime veya cümlenin kalın yazılması için;\n**kelime** ya da __kelime__\nBunun çıktısı şu şekilde görünecektir:\nkelime ya da kelime\n\n\n4.1.3.2 Metni İtalik Şekilde Yazma\nKelime veya cümlenin italik yazılması için;\n*kelime* ya da _kelime_ \nşeklinde yazılması gerekir.\nBunun çıktısı şu şekilde görünecektir:\nkelime ya da kelime\n\n\n4.1.3.3 Kalın ve İtalik Yazma\nKelime veya cümlenin hem kalın hem italik yazılması için;\n***kelime*** ya da ___kelime___\nşeklinde yazılması gerekir.\nBunun çıktısının\nkelime ya da kelime\nşeklinde yazılması gerekir.\n\n\n\n4.1.4 Madde Ekleme ve Sıralama\n\n4.1.4.1 Madde Ekleme\nMarkdown kullanırken madde eklenmesi isteniyorsa satır başına + ya da - eklemek yeterli olacaktır. Örneğin hücre organellerinin maddeler halinde yazılması isteniyorsa her satır başına + ya da - konması yeterli olacaktır.\nörneğin;\n+ kloroplast\n+ mitokondri\n+ endoplazmik retikulum...\nyazıldığı zaman elde edilen çıktı:\n\nkloroplast\nmitokondri\nendoplazmik retikulum…\n\nşeklinde olacaktır.\n\n\n4.1.4.2 Sıralama\nSıralama yapılırken madde ekleme ile benzer bir mantık yürütülür. bunun için satır başına 1. yazılırsa sıralama yapılacaktır.\nÖrneğin;\n1. a\n2. b\n3. c\nyazıldığı zaman elde edilen çıktı\n\na\nb\nc\n\nşeklinde olacaktır.\n\n\n\n4.1.5 Bağlantı Ekleme\nMarkdown kullanılırken bağlantı eklenmesi isteniyorsa\n[bağlantı adı](bağlantı)\nşeklinde yazılması uygun olacaktır. Örneğin komut satırına\n[nature](https://www.nature.com/)\nyazılması durumunda elde edilen çıktı nature şeklinde olacaktır.\n\n\n4.1.6 Kod Ekleme\nMarkdown kullanırken satır içine kod eklenmesi isteniyorsa\n`kod`\nşeklinde yazılması yeterli olacaktır. Bu bize satır içinde kod yazımını sağlayacaktır.\nEğer kod bloğu eklemek istersek şu karakterleri kullanmalıyız:\n```\nkod\n```\nyazıldığı zaman ekranda yazılan çıktı:\nkod\nşeklinde olacaktır.\n\n\n4.1.7 Tablo ekleme\nTablo eklerken aşağıdaki girdinin çıktısı tablodaki gibi oalcaktır.\n|    |  x   |  y   |\n|----|:-----|-----:|\n|a   |  dld |  sls |\n|b   |  hkh |  tyt |\n\n\n\n\nx\ny\n\n\n\n\na\ndld\nsls\n\n\nb\nhkh\ntyt\n\n\n\n\n\n4.1.8 Görsel Ekleme\nMarkdown kullanırken görsel eklenmesi bağlantı ekleme ile benzer bir mantıkla yapılır. bunun için\n![altyazı](resim adresi)\nşeklinde yazılması uygun olacaktır. örneğin komut satırına\n![markdown](https://icons.veryicon.com/png/o/object/material_design_icons/markdown-1.png)\nyazılması durumunda elde edilecek çıktı\n\n\n\nmarkdown\n\n\nşeklinde olacaktır.",
    "crumbs": [
      "Derse Hazırlık",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Markdown Kullanımı</span>"
    ]
  },
  {
    "objectID": "01-lectures/01-ynd.html",
    "href": "01-lectures/01-ynd.html",
    "title": "5  Yeni Nesil Dizileme Teknolojileri",
    "section": "",
    "text": "Bu kısımda okunması gereken makaleleri ekiyorum:\n\nGoodwin et al., 2016\nSlatko et al., 2018\nVoelkerding et al., 2009\nDönmez et al., 2015",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Yeni Nesil Dizileme Teknolojileri</span>"
    ]
  },
  {
    "objectID": "01-lectures/02-fastq-quality-control.html",
    "href": "01-lectures/02-fastq-quality-control.html",
    "title": "6  Fastq kalite kontrol",
    "section": "",
    "text": "6.1 Ham okumaların kalite kontrolü\nBu iş için kullanacağımız betiği indirelim:\nKlasörü kontrol edelim:\nŞimdi de işimizi gönderelim:",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Fastq kalite kontrol</span>"
    ]
  },
  {
    "objectID": "01-lectures/02-fastq-quality-control.html#ham-okumaların-kalite-kontrolü",
    "href": "01-lectures/02-fastq-quality-control.html#ham-okumaların-kalite-kontrolü",
    "title": "6  Fastq kalite kontrol",
    "section": "",
    "text": "wget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/fastqc-before-trimming.sh -P scripts/\n\nls -ltrh scripts\n\nsbatch scripts/fastqc-before-trimming.sh",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Fastq kalite kontrol</span>"
    ]
  },
  {
    "objectID": "01-lectures/02-fastq-quality-control.html#tek-yönlü-ham-okumaların-işlenmesi",
    "href": "01-lectures/02-fastq-quality-control.html#tek-yönlü-ham-okumaların-işlenmesi",
    "title": "6  Fastq kalite kontrol",
    "section": "6.2 Tek yönlü ham okumaların işlenmesi",
    "text": "6.2 Tek yönlü ham okumaların işlenmesi\nKullanacağımız betiği indirelim:\nwget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/cutadapt-adapter-trimming-se.sh -P scripts/\nŞimdi betiğimizi çalıştıralım:\nsbatch scripts/cutadapt-adapter-trimming-se.sh\nKontrol edelim:\nsqueue",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Fastq kalite kontrol</span>"
    ]
  },
  {
    "objectID": "01-lectures/02-fastq-quality-control.html#çift-yönlü-ham-okumaların-işlenmesi",
    "href": "01-lectures/02-fastq-quality-control.html#çift-yönlü-ham-okumaların-işlenmesi",
    "title": "6  Fastq kalite kontrol",
    "section": "6.3 Çift yönlü ham okumaların işlenmesi",
    "text": "6.3 Çift yönlü ham okumaların işlenmesi\nwget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/cutadapt-adapter-trimming-pe.sh -P scripts/\nŞimdi betiğimizi çalıştıralım:\nsbatch scripts/cutadapt-adapter-trimming-pe.sh\nKontrol edelim:\nsqueue",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Fastq kalite kontrol</span>"
    ]
  },
  {
    "objectID": "01-lectures/02-fastq-quality-control.html#cutadapt-parametreleri",
    "href": "01-lectures/02-fastq-quality-control.html#cutadapt-parametreleri",
    "title": "6  Fastq kalite kontrol",
    "section": "6.4 Cutadapt parametreleri",
    "text": "6.4 Cutadapt parametreleri\nŞimdi cutadapt --help komutu ile programın bütün opsiyonlarını öğrenebilirisniz. Ancak en önemlililer aşağıda:\n\na: ileri yönlü DNA okumalarında adaptörlerin kesilmesi\nA: geri yönlü okumalardaki adaptörlerin kesilmesi\nq: belirlenen eşik değerinin altındaki okuma kalitesine sahip nükleotidlerin kesilmesi\nminimum-length kesimin ardından belirli nükleotidleriden kısa olan okumaları at\n\nBizim fastq dosyalarımız tek yönlü olduğu için, sadece a opsiyonunu kullanacağız.\nŞu bağlantıya tıklayarak dosyalarımız indirelim ve TRUBA sistemine yükleyelim:\nBağlantı\nŞu bağlantıya tıklayarak dosyalarımız indirelim ve TRUBA sistemine yükleyelim:\nBağlantı\nKendi oluşturduğumuz klasörlere girelim. Siz kendi isminizi yazınız.\nmkdir Dersler\ncd Dersler\nDaha sonra indirdiğimiz klasörü TRUBA sistemine yükleyerek aşağıdaki komutla açalım\ntar -xzf 2024_04_03_ders_qc_01.tar.gz\nVe klasör içerisine girelim:\ncd 2024_04_03_ders_qc_01\nİçeriğe bakalım:\nls -l\nData klasörü içeriğine bakalım:\nls -l data\nİstersek dosyayı inceleyebiliriz:\nless data/sample1.fastq.gz\nBu dosyanın uzantısı gz. Biyoinformatik alanında kullanılan dosyalar genelde çok yer kapladıkları için sıkıştırılırlar. Bu uzantı da dosyanın sıkıştırıldığını bize söylüyor. Genelde less komutu sıkıştırılmış dosyaları açabilir. Ancak açamadıysa onun yerine zless komutunu deneyebilirsiniz. Bu program özel olarak gz uzantılı dosyaları açmak için tasarlanmıştır.\nŞimdi bu incelediğimiz dosyanın kalite kontrol işlemini gerçekleştireceğiz. Bunun için fastqc programını kullancağız.\nBunun için TRUBA sistemine bir iş betiği göndermemiz gerekli. Bu iş betiği dosyasını inceleyelim:\ncat fastqc_before_trimming.sh\nBu iş betiği dosyası, istediğimiz komutları TRUBA sistemine gönderip çalıştıracak.\nBunun için Barbun isimli bilgisayardan, 4 tane işlemci rezerve ediyoruz ve egitim kullanıcı ismiyle işimizi slurm sistemine gönderityoruz.\nBu iş dosyasını inceleyelim\nBirinci satır genelde zorunlu olarak kullanılması gereken bir satır. Bu aslında dosyanın bash ile çalıştırılması gerektiğini söylüyor:\n#!/bin/bash\n#SBATCH ile başlayan satırlar ise, slurm sisteminde gerekli olan parametreleri belirliyor.\n\n--partition opsiyonu ile kullanacağımız bilgisayarı belirleyebiliriyoruz\n--ntasks-per-node opsyinu ile kaç tane çekirdek kullanmak istediğimizi belirliyoruz\n--user opsiyonu ise kullancı ismimizi belirlememizi sağlıyor. Unutmayıni kullanıcı isminizi mutlaka belirlemeliziniz.\n\nPATH ile başlayan satır ise, kullanılacak programların yolunu belirtiyor.\nArdından ilk olarak mkdir ile çıktı dosyalarımızı yazacağımız klasörü belirliyoruz.\nDaha sonra fastqc programını çalıştırıyoruz.\nÖncelile kullanıcı isminizi nano programı ile düzeltiniz:\nnano fastqc_before_trimming.sh\nİş dosyasını çalıştıralım:\nsbatch fastqc_before_trimming.sh\nGönderdiğimiz işi şu şekilde kontrol edelim:\nsqueue -u egitim\nBunu ara ara takip edelim. İşimiz bittiğinide artık bu ekranda bir bilgi olmayacak.\nİşimiz bittiğinde sonra, çalışma klasörümüzde slurm ile başlayan bir dosya oluşacak. Bu dosyayı, less programı ile kontrol edelim. Bu doya bizim komutlarımızn çıktılarını gösterecek.\nEğer başarılı olduysak results/fastqc_before_trimming klasörü içinde bir kaç dosya oluşacak. Onlara bakalım:\nls -lh results/fastqc_before_trimming\nBu dosyayı bilgisayarımıza indirebiliriz. Önce yeni bir ubuntu ekranı ya da terminal ekranı açalım ve aşağıdaki komutu yazalım:\nscp egitim@levrek1.ulakbim.gov.tr:/truba/home/egitim/emrah/00-Fastq-Kalite-Kontrol/results/fastqc-before-trimming/*html .",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Fastq kalite kontrol</span>"
    ]
  },
  {
    "objectID": "01-lectures/04-alignment-variant-calling-01.html",
    "href": "01-lectures/04-alignment-variant-calling-01.html",
    "title": "7  Hizalama",
    "section": "",
    "text": "7.1 Hizalama\nŞimdi ilk olarak elimizdeki referans genomu indekslemeliyiz. Bunun için bwa programında bulunan index komutunu kullanacağız. Bakteri genomlarını hızlıca konsolda indeksleyebiliriz. Ancak ökaryotik genomlar için ayrı sbatch işleri hazırlamamız çok daha iyi olacaktır.\nOluşan dosyalara bakalım:\nBir sonraki adımda okumalarımızı referans genoma hizalamaya başlayacağız. İhtiyacımız olan dosyayı indirelim:\nŞimdi ise samtools flagstat ile, elde ettiğimiz sam dosyalarını inceleyelim. Önce ham sam dosyası:\nŞimdi, hizalanmayan okumalardan arındırılmış bam dosyası\nDuplikasyonlardan arındırılmış bam dosyası:\nŞimdi, elimizdeki dosyayı görselleştirelim:\nDersin başında bulduğumuz geni inceleylim mi?",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Hizalama</span>"
    ]
  },
  {
    "objectID": "01-lectures/04-alignment-variant-calling-01.html#hizalama",
    "href": "01-lectures/04-alignment-variant-calling-01.html#hizalama",
    "title": "7  Hizalama",
    "section": "",
    "text": "bwa index data/ref/GCF_000014205.1_ASM1420v1_genomic.fna\n\nls -ltrh data/ref\n\nwget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/alignment.sh -P scripts\n\nsamtools flagstat results/alignment/ERR3079326.sam\n\nsamtools flagstat results/alignment/ERR3079326.bam\n\nsamtools flagstat results/alignment/ERR3079326.sorted.rmdup.bam\n\nsamtools tview --reference data/ref/GCF_000014205.1_ASM1420v1_genomic.fna results/alignment/ERR3079326.sorted.rmdup.bam\n\nsamtools tview -p NC_009009.1:254673 --reference data/ref/GCF_000014205.1_ASM1420v1_genomic.fna results/alignment/ERR3079326.sorted.rmdup.bam",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Hizalama</span>"
    ]
  },
  {
    "objectID": "01-lectures/04-alignment-variant-calling-01.html#sam-dosyaları",
    "href": "01-lectures/04-alignment-variant-calling-01.html#sam-dosyaları",
    "title": "7  Hizalama",
    "section": "7.2 SAM dosyaları",
    "text": "7.2 SAM dosyaları\nDNA hizalama işleminin ardıdan, ham hizalama verisi bu dosya içerinde tutulur. Genotip ve varyant çağırma işleminden önce, bu dosya filtre edilir. Bu filtrasyon aşağıdaki basamakları kapsamaktadır:\n\nReferans genom ile hizalanmayan okumaların uzaklaştırılması\nKötü hizalama kalitesine sahip okumaların uzaklaştırılması (-q 30)\n\nSAM dosyalarında, hizalama bilgisi, flag adı verilen bir değişken içinde saklanır. Bu flag bilgilerine şu siteden erişebilirsiniz.\nHizalama kalitesi (-q) aslında, phred okuma kalitesinin bir fonksiyonu. Genelde 30 okuma kalitesinden daha düşük olan diziler, hizalama dosyasından uzaklaştırlır.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Hizalama</span>"
    ]
  },
  {
    "objectID": "01-lectures/05-alignment-variant-calling-02.html",
    "href": "01-lectures/05-alignment-variant-calling-02.html",
    "title": "8  Varyant Çağırma",
    "section": "",
    "text": "Varyant çağırma işlemi için dosyamızı indirelim:\n wget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/variant-calling.sh -P scripts/\nŞimdi işimizi gönderelim:\nsbatch scripts/variant-callint.sh\nls -ltrh results/variants\nless results/variants/ERR3079326.sorted.rmdup.likelihoods.vcf\nŞimdi de varyantlar:\n``bash less results/variants/ERR3079326.sorted.rmdup.calls.vcf ```",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Varyant Çağırma</span>"
    ]
  },
  {
    "objectID": "01-lectures/07-rnaseq.html",
    "href": "01-lectures/07-rnaseq.html",
    "title": "9  RNA Dizileme",
    "section": "",
    "text": "9.1 Kalite kontrol\nBütün işlemler her zaman kalite kontrol ile başlamalı. Bu yüzden öncelikle bir kalite kontrol adımı uygylayacağız.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>RNA Dizileme</span>"
    ]
  },
  {
    "objectID": "01-lectures/07-rnaseq.html#kalite-kontrol",
    "href": "01-lectures/07-rnaseq.html#kalite-kontrol",
    "title": "9  RNA Dizileme",
    "section": "",
    "text": "wget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/quality-control-and-cutadapt.sh -P scripts/",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>RNA Dizileme</span>"
    ]
  },
  {
    "objectID": "01-lectures/07-rnaseq.html#rnaseq-hizalama",
    "href": "01-lectures/07-rnaseq.html#rnaseq-hizalama",
    "title": "9  RNA Dizileme",
    "section": "9.2 RNAseq hizalama",
    "text": "9.2 RNAseq hizalama\nÖnce genomu indeksleyelim:\nbowtie2-build data/ref/GCA_000007565.2_ASM756v2_genomic.fna data/ref/GCA_000007565.2_ASM756v2_genomic.fna\nŞimdi de okumalarımız referans genoma hizalayalım. Dikkat edin elimizde 4 tane okuma var, yani dört farklı iş göndermeliyiz. Önce betiği indirelim:\nwget https://raw.githubusercontent.com/emrahkirdok/bioinformatics/refs/heads/main/09-scripts/02-sbatch-scripts/rnaseq-alignment.sh -P scripts/\nŞimdi de betiği gönderelim:\nsbatch scripts/rnaseq-alignment.sh\nDikkat edin elimizde 4 tane var, hepsi için dosyayı değiştirmeliyiz, ya da betiği parametre ile yeniden düzenlemeliyiz:\nDosyayı kopyalalayım:\ncp scripts/rnaseq-alignment.sh scripts/rnaseq-alignment-parameter.sh\nŞimdi de komut satırı parametresi işlevi ekleyelim:\ncp scripts/rnaseq-alignment.sh scripts/rnaseq-alignment-command-line-parameter.sh\nSon olarak dosyalardan bir tanesini samtools tview ile inceleyelim.\nŞimdi, featureCounts programı ile, her gene karşılık gelen DNA okuması miktarını alalım. Ama bunun betiğini siz yazın:\nmkdir -p results/counts\n\nfeatureCounts -T4 -t CDS -a data/ref/GCA_000007565.2_ASM756v2_genomic.gtf -o results/counts/counts-SRR7029605.txt results/alignment/SRR7029605.sorted.bam",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>RNA Dizileme</span>"
    ]
  },
  {
    "objectID": "01-lectures/09-rnaseq-analysis.html",
    "href": "01-lectures/09-rnaseq-analysis.html",
    "title": "10  RNA dizileme veri analizi",
    "section": "",
    "text": "11 RNAseq\nRNA dizileme veri analizi, modern biyolojik araştırmalarda gen ifadesini anlamak için kullanılan güçlü bir yöntemdir. Bu bağlamda, komut satırı üzerinden işlemlerimizi gerçekleştiriyoruz.\nRNA dizileme çalışması kapsamında şu aşamalar bulunmaktadır: + Biyolojik bir numuneden RNA izolasyonu + RNA’nın cDNA’ya dönüştürülmesi (ters transkripsiyon) + cDNA’nın fragmentlerine ayrılması + cDNA parçaları kitaplığının hazırlanması ve yeni nesil dizileme kullanılarak dizilenmesi + Ham fastq dosyalarının eldesi + Dizilerin ‘cutadapt’ ile işlenerek, ‘fastqc’ aracı ile kalite kontrolden geçirilmesi + Fastq’ların referans genoma hizalanması ve RNA dizileme verisi eldesi + Gen ekspresyonu belirlenmesi için referans genoma hizalanan dizilerin sayılması + Gene okumaları sayıldıktan sonra, sağlıklı ve hastalıklı koşulların karşılaştırılması",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>RNA dizileme veri analizi</span>"
    ]
  },
  {
    "objectID": "01-lectures/09-rnaseq-analysis.html#git-deposu-ile-klonlama",
    "href": "01-lectures/09-rnaseq-analysis.html#git-deposu-ile-klonlama",
    "title": "10  RNA dizileme veri analizi",
    "section": "12.1 Git Deposu ile Klonlama",
    "text": "12.1 Git Deposu ile Klonlama\nİlk olarak, Nursena Kocatürk’ün oluşturduğu Github deposuna giderek RNA dizileme için ihtiyaç duyduğumuz dosya ve betikleri bilgisayarımıza ekliyoruz.\n‘Code’ kutucuğuna tıklayarak çıkan https bağlantısını kopyalayalım.\nTerminalde oluşturduğumuz proje klasörüne girelim ve linki\ngit clone https://github.com/nursenakocaturk/rnaseq\nkomutuyla işleyelim.\nKullanılacak referans genom ve ham DNA okumaları klasörümüzün içinde oluşacak data klasöründe yer alacaktır. İşlenen veriler (çıktılar ve DNA okumaları) de yine proje klasörü içinde results klasöründe yer alacaktır. Bu klasörleri indireceğimiz betiklerle oluşturacağız.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>RNA dizileme veri analizi</span>"
    ]
  },
  {
    "objectID": "01-lectures/09-rnaseq-analysis.html#conda-miniconda-kurulumu-ve-aktifleştirilmesi",
    "href": "01-lectures/09-rnaseq-analysis.html#conda-miniconda-kurulumu-ve-aktifleştirilmesi",
    "title": "10  RNA dizileme veri analizi",
    "section": "12.2 Conda (Miniconda) Kurulumu ve Aktifleştirilmesi",
    "text": "12.2 Conda (Miniconda) Kurulumu ve Aktifleştirilmesi\nConda programlarından işletim sistemimize (Ubuntu için Linux) uygun olanı indirelim. Bağlantı linkini kopyalayıp\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nörneğindeki gibi yükleyelim. Ardından Conda çerçevelerini kurup aktive edelim. Bu çerçevelerde gerekli tüm paketler mevcuttur. Dolayısıyla sadece bize lazım olan çerçeveleri kullanacağız.\nÖnce RNAseq çevresini kuralım.\nconda env create --file envs/rnaseq.yaml\nArdından bu çerçeveyi aktive edelim.\nconda activate rnaseq\nArtık komut satırının başında aktive olan çerçevenin adı parantes içinde görünmelidir.\nEğer Conda çerçevemizin güncel bir versiyonda olup olmadığından emin değilsek\nconda env update --file envs/rnaseq.yaml\nkomutuyla en son güncellemeyi sağlayabiliriz.\nİlerleyen süreçte kullanacağımız R çerçevesini de kullanılacağı zaman aktive etmek üzere kuralım.\nconda env create --file envs/r.yaml",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>RNA dizileme veri analizi</span>"
    ]
  },
  {
    "objectID": "01-lectures/09-rnaseq-analysis.html#okumaların-ve-referans-genomların-alınması",
    "href": "01-lectures/09-rnaseq-analysis.html#okumaların-ve-referans-genomların-alınması",
    "title": "10  RNA dizileme veri analizi",
    "section": "12.3 Okumaların ve Referans Genomların Alınması",
    "text": "12.3 Okumaların ve Referans Genomların Alınması\nBu kısımda örnek bir veri setiyle çalışacağız. Klonlanan klasörümüzdeki ‘data_ena.txt’ metin dosyasında bulunan işlenmemiş (ham) okumalar, bu okumalara ait bilgiler ve indirme linkleri bulunuyor. Aynı klasörde ‘data.txt’ metin dosyasında ise bir önceki metin dosyasından alınmış dört örnek mevucttur.\nProje klasöründe bulunan ‘raw’ klasöründe işlenmemiş okumalar bulunurken ‘ref’ klasöründe referans genomumuz bulunmaktadır.\nmkdir -p data/raw\nmkdir -p data/ref\n\n12.3.1 Ham Okumaların Alınması\nTüm ham okumaları kapsayan listede hem çift yönlü (paired-end, pe) hem de tek yönlü (single-end, se) okumalar bulunuyor. Bu iki tip okumalar farklı işleneceği için klasörlerde bazı ayrımlar yapmamız gerekiyor. Bunun için ‘raw’ klasörüne bunun için ‘pe’ ve ‘se’ klasörleri oluşturalım.\n‘data.txt’ dosyasında mevcut olan örneklerimizin hepsi tek yönlüdür (se). Tek yönlü bu okumalarımız için gerekli klasöre gidelim.\ncd data/raw/se\n‘data_ena.txt’ dosyasından incelenecek okumanın linkini kopyalayıp indirelim (‘ftp://’ ön takısını ekleyelim.).\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR702/005/SRR7029605/SRR7029605.fastq.gz\nDiğer üç örnek için de aynı kodu oluşturup çalıştıralım. Sonuçta ‘se’ klasöründe toplamda dört tane ‘fastq.gz’ uzantılı dosya eklenmiş olduğunu kontrol edelim.\n\n\n12.3.2 Referans Genomun Alınması\nReferans genom için ‘ref’ klasöründeki referans dosyalarını ‘gunzip’ komutuyla çalıştıralım.\ncd data/ref\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/007/565/GCA_000007565.2_ASM756v2/GCA_000007565.2_ASM756v2_genomic.fna.gz\n\ngunzip GCA_000007565.2_ASM756v2_genomic.fna.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/007/565/GCA_000007565.2_ASM756v2/GCA_000007565.2_ASM756v2_genomic.gff.gz\n\ngunzip GCA_000007565.2_ASM756v2_genomic.gff.gz\n\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/007/565/GCA_000007565.2_ASM756v2/GCA_000007565.2_ASM756v2_genomic.gtf.gz\n\ngunzip GCA_000007565.2_ASM756v2_genomic.gtf.gz\nİndirdiğimiz referans genom dosyasını ‘gunzip’ komutuyla çalışmalı ki indeksleme doğru şekilde olabilsin.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>RNA dizileme veri analizi</span>"
    ]
  },
  {
    "objectID": "01-lectures/08-metagenomics.html",
    "href": "01-lectures/08-metagenomics.html",
    "title": "11  [Antik] Metagenomik",
    "section": "",
    "text": "11.1 Alfa çeşitlilik\nOn bin yıllık antik sakızda bulunan mikrobiyal profili inceleyelim. Gösterilen şekilde hem antik sakız örnekleri kullanılmıştır hem de karşılaştırmalı bazı veri setleri bulunmaktadır. Antik diş taşları ve insan mikrobiyota örneklerinden elde edilen metaphlan3 profilleri bu çalışmanın temelini oluşturmaktadır.\n## Beta çeşitlilik\nBray curtis uzaklığı oluşturalım. Elimizde \\(i\\) ve \\(j\\) olmak üzere iki farklı ekolojik çevre olsun. Bu çevreler için aşağıdaki değişkenleri tanımlayalım:\nBu tanımları kullanırsak, Bray-Curts uzaklığını aşağıdaki gibi hesaplayabiliriz:\n$$\nBC =\n$$\nBu uzaklıkları görselleştrirelim:\nNMDS ile görselleştirelim. NMDS metrik veriyi, \\(k\\) boyutlu bir uzaya projekisyon ediyor.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>[Antik] Metagenomik</span>"
    ]
  },
  {
    "objectID": "01-lectures/08-metagenomics.html#alfa-çeşitlilik",
    "href": "01-lectures/08-metagenomics.html#alfa-çeşitlilik",
    "title": "11  [Antik] Metagenomik",
    "section": "",
    "text": "Filum seviyesinde mikrobiyal profiller\n\n\n\n\n\nSadece \\(i\\) çevreseinde bulunan mikrobiyal tür sayısı: \\(S_i\\)\nSadece \\(j\\) çevreseinde bulunan mikrobiyal tür sayısı: \\(S_j\\)\nHer iki ekolojik alanda birden bulunan tür sayısı: \\(S_{ij}\\)\n\n\n\n\n\n\n\n\n\n\nMetrik olmayan çok boyutlu ölçekleme tekniği grafiği",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>[Antik] Metagenomik</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html",
    "href": "01-lectures/06-bash-scripting.html",
    "title": "12  Bash ile betik oluşturma",
    "section": "",
    "text": "12.1 Değişken oluşturma\nBu işlemleri konsol üzerinde yapalım. Bir değişken oluşturalım:\nBu değişkeni ekrana yazdıralım:\nArtık değişken içerisindeki bilgiyi ekrana yazdırabildiniz.\nİsterseniz, bu değişkenin sağına ve soluna başka şeyler ekleyebilirsiniz. Bu sayede, tek bir değişken kullanımı ile, birden fazla dosyayı işaret edebilirsiniz:\nBir değişkeni, tanımlamadan kullanamazsınız. Mesela daha önce hiç tanımlamadığıız bir değişken kullanalım. Değişkenin ismi BOS olsun:\nBunu yazdığımızda, ekrana boş bir satır yazdırıldı.\nAma bu değişkeni tanımlarsak, artık kullanabilirz:",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html#değişken-oluşturma",
    "href": "01-lectures/06-bash-scripting.html#değişken-oluşturma",
    "title": "12  Bash ile betik oluşturma",
    "section": "",
    "text": "SAMPLE=ERR3079326\n\n\n\n\n\n\nKarakter kullanımı\n\n\n\nDeğişken oluştururken, sadece İngilizce karakterler kullanın!\n\n\n\necho ${SAMPLE}\n\n\necho data/${SAMPLE}_1.fastq.gz\n\necho ${BOS}\n\n\nBOS=ERR65245\necho ${BOS}",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html#dosya-sistemleri",
    "href": "01-lectures/06-bash-scripting.html#dosya-sistemleri",
    "title": "12  Bash ile betik oluşturma",
    "section": "12.2 Dosya sistemleri",
    "text": "12.2 Dosya sistemleri\nBir projede dosya sistemi önemlidir. Çünkü uzun vadede, biyoinformatik projelerinde büyük miktarda dosya oluşturulur. Bu çıktıları ve dosyaları uygun konumlarda saklarsanız, projeleri daha rahat yönetebilirsiniz.\nDers kapsamında yaptığımız projede, aşağıdaki dosya sistemi kullanıldı:\n04-Bash-scripting\n|\n|----------------- data\n|                    |\n|                    |---- ERR3079326_1.fastq.gz\n|                    |---- ERR3079326_2.fastq.gz\n|                    |---- GCF_000191105.1_ASM19110v1_genomic.fna\n|\n|----------------- results\n|                     |\n|                     |--- processed\n|                     |\n|                     |--- alignment\n|                     |\n|                     |--- variant\n|\n|----------------- protokol.sh\nBurada, data klasöründe, ham veri bulunmakta.\nSonuçlar klasöründe ise, bu ham verinin işlenerek elde edilen çıktıların depolandığı yer.\nSonuçlar klasöründe, processed klasörü, ham fastq dosyalarının işlenmesi, sonucunda elde edilen çıktıları depoluyor.\nSonuçlar klasöründe, alignment klasörü, işlenmiş fastq dosyalarının, data klasörü içerisinde bulunan referans genoma hizlanması sonucunda elde edilen verileri depoluyor.\nSonuçlar klasöründeki, variant klasörü ise, hizalama dosyalarından elde edlen varyant bilgilerini depoluyor.",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html#fastq-ön-işleme",
    "href": "01-lectures/06-bash-scripting.html#fastq-ön-işleme",
    "title": "12  Bash ile betik oluşturma",
    "section": "12.3 Fastq ön işleme",
    "text": "12.3 Fastq ön işleme\n# Oncelikle cikti dosyalarimizi saklayacagimiz klasoru olusturalim\n\nmkdir -p results/processed/\n\n# Daha sonra cutadapt araci ile, fastq dosyalarini isleyelim\ncutadapt -q ${QUALITY} -m 10 \\\n        --trim-n -a AGATCGGAAGAG -A AGATCGGAAGAG \\\n        -j ${THREADS} \\\n        -o results/processed/${SAMPLE}_1.fastq.gz \\\n        -p results/processed/${SAMPLE}_2.fastq.gz data/${SAMPLE}_1.fastq.gz data/${SAMPLE}_2.fastq.gz",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html#hizalama-adımı",
    "href": "01-lectures/06-bash-scripting.html#hizalama-adımı",
    "title": "12  Bash ile betik oluşturma",
    "section": "12.4 Hizalama adımı",
    "text": "12.4 Hizalama adımı\n# Oncelikle referans genomu indeksleyelim\nbwa index data/${REFERENCE}\n\n# cikti klasorunu olusturalim\nmkdir -p results/alignment\n\n# Daha sonra ileri ve geri okumalarimizi referans genoma hizalayalim\nbwa aln -t ${THREADS} data/${REFERENCE} results/processed/${SAMPLE}_1.fastq.gz &gt; results/alignment/${SAMPLE}_1.sai\n\nbwa aln -t ${THREADS} data/${REFERENCE} results/processed/${SAMPLE}_2.fastq.gz &gt; results/alignment/${SAMPLE}_2.sai\n\n# hizalama dosyasi olsturalim\nbwa sampe data/${REFERENCE} \\\n        results/alignment/${SAMPLE}_1.sai results/alignment/${SAMPLE}_2.sai \\\n        data/${SAMPLE}_1.fastq.gz data/${SAMPLE}_2.fastq.gz &gt; results/alignment/${SAMPLE}.sam\n\n# hizalama istatistiklerini elde edelim\nsamtools flagstat results/alignment/${SAMPLE}.sam &gt; results/alignment/istatistik_${SAMPLE}.txt\n\n# hizalanmamis ve kotu hizalanan okumalarari filtreleylim\nsamtools view -F 12 -q 30 -Sb results/alignment/${SAMPLE}.sam &gt; results/alignment/${SAMPLE}.bam\n\n# hizalama dosyasini siralayalim\nsamtools sort results/alignment/${SAMPLE}.bam -o results/alignment/${SAMPLE}.sorted.bam\n\nsamtools index results/alignment/${SAMPLE}.sorted.bam",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "01-lectures/06-bash-scripting.html#varyant-cağırma",
    "href": "01-lectures/06-bash-scripting.html#varyant-cağırma",
    "title": "12  Bash ile betik oluşturma",
    "section": "12.5 Varyant cağırma",
    "text": "12.5 Varyant cağırma\n# Oncelikle sonuclari depolayacagimiz klasorleri olsuturalim\nmkdir -p results/variant\n\n# genotip cagirma gerceklestirelim\nbcftools mpileup -Ov --fasta-ref data/${REFERENCE} results/alignment/${SAMPLE}.sorted.bam &gt; results/variant/${SAMPLE}.genotype.vcf\n\n# son olarak, varyant cagirma adimini yapalim\nbcftools call -mv -Ov -o results/variant/${SAMPLE}.calls.vcf results/variant/${SAMPLE}.genotype.vcf",
    "crumbs": [
      "Dersler",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bash ile betik oluşturma</span>"
    ]
  },
  {
    "objectID": "02-practice/01-variant-practice.html",
    "href": "02-practice/01-variant-practice.html",
    "title": "13  Varyant çağırma pratiği",
    "section": "",
    "text": "13.1 Referans genom indeksleme\nBu işlem için öncelikle referenans genomu indekslemeniz gerekecektir. Bu işlemi bir kere yapmanız yeterli olacaktır.\nBu işlemin bitip bitmediğini, squeue komutu ile kontrol edelim:\nBurada egitim kullanıcı adını siz kendi kullanıcı isminizle değiştirmelisiniz.\nBu adım tamamlandıktan sonra data klasörü içinde indeks dosyaları oluşmuş mu onları kontrol edelim:\nİndeks dosyaları oluşmuşsa, bir sonraki adıma geçebiliriz.",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Varyant çağırma pratiği</span>"
    ]
  },
  {
    "objectID": "02-practice/01-variant-practice.html#referans-genom-indeksleme",
    "href": "02-practice/01-variant-practice.html#referans-genom-indeksleme",
    "title": "13  Varyant çağırma pratiği",
    "section": "",
    "text": "sbatch index.sh\n\nsqueue -u egitim\n\n\nls data",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Varyant çağırma pratiği</span>"
    ]
  },
  {
    "objectID": "02-practice/01-variant-practice.html#örneklerle-varyant-analizi",
    "href": "02-practice/01-variant-practice.html#örneklerle-varyant-analizi",
    "title": "13  Varyant çağırma pratiği",
    "section": "13.2 Örneklerle varyant analizi",
    "text": "13.2 Örneklerle varyant analizi\nBu adımıda ise protokol.sh betiğini kullanacağız. Bu betiği nano isimli programla açarak, SAMPLE değişkenini örnek isimleriyle değiştirmemiz gereklidir.\nBunu her örnek için tekrar etmeliyiz.\nÖrnek vermek gerekirse, öncelikle ERR3079333 için bu adımı gerçekleştirelim:\n\nprotokol.sh dosyasını aç\nSAMPLE değişkenini değiştir\nsbatch protokol.sh ile protokolu çalıştır.\n\nArdından bu işlemi her örnek için gerçekleştirelim.",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Varyant çağırma pratiği</span>"
    ]
  },
  {
    "objectID": "02-practice/01-variant-practice.html#döngüler-ile-otomatizasyon",
    "href": "02-practice/01-variant-practice.html#döngüler-ile-otomatizasyon",
    "title": "13  Varyant çağırma pratiği",
    "section": "13.3 Döngüler ile otomatizasyon",
    "text": "13.3 Döngüler ile otomatizasyon\nBunu istersek otomatize edebiliriz. Her örnek için bir protokol gönderebiliriz. Bunun için protokol_otomatik.sh isimli betiğe bakalım.\nBu betiğin içindeki tek değişiklik şu:\nSAMPLE=$1\nBurada, biz betiğe komut satırı üzerinden bir opsiyon atıyoruz. Bu sayede sürekli dosyayı değiştirmekten kurtuluyoruz. Yani sürekli SAMPLE değişkenini değiştirmektense, sbatch protokol_otomatize.sh ERR3079326 yazdığımızda, SAMPLE değişkenine otomatik olarak ERR3079326 değeri atanmış oluyor.\nTabii bir for dongüsü yazarak, bunu tamamen otomatize edebiliriz:\nSAMPLES=\"ERR3079326 ERR3079327 ERR3079328 ERR3079329 ERR3079331 ERR3079333\"\nfor SAMPLE in ${SAMPLES}\ndo\n    sbatch protokol_otomatik.sh ${SAMPLE}\ndone\nBu işlemi yaptığımızda, SAMPLES içerisindeki bütün örnek isimleri için, protokol_otomatik.sh betiği çalıştırılacaktır.",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Varyant çağırma pratiği</span>"
    ]
  },
  {
    "objectID": "02-practice/02-rnaseq-project.html",
    "href": "02-practice/02-rnaseq-project.html",
    "title": "14  RNA Dizileme Proje Örneği",
    "section": "",
    "text": "14.1 Klasör yapısı\nYapacağınız çalışmada aşağıdaki klasör yapısını korumanız sizin için kullanışlı olur:\n## Veri\nProje kapsamında kullanılacak veri:\nVeriyi indirmek için öncelikle aşağıda bulunan belgeye bakalım. Bu belgede kullancağımız örnekler ve bu örneklerin metaveri bilgileri bulunmaktadır:\nhttps://github.com/emrahkirdok/rnaseq/blob/main/data.txt\nBu belgeye göre aşağıdaki tabloya bakalım:\nÖncelikle Proje dosyamızı oluşturalım. İlk olarak hangi klasördeyiz ona bakalım, rastgele bir yere proje dosyası oluşturmayalım:\nTercihen ev klasörümüze gelelim ve yeni bir proje klasörü oluşturalım:\nArtık kendimize bir data klasörü oluşturalım ve bu klasör içinde de raw isimli başka bir klasör olsun:\nbu klasör içine girelim ve çalışacağımız dosyaları indirelim:\nAşağıdaki satırları tek tek yazarak çalışacağımız dosyaları indirebiliriz. Burada kullanılan wget komutu, uzaktaki bir sunucudan dosyaları indirmek için kullanılmaktadır.\nİşlem bittiğinde ls -ltrh ile kontrol edelim.\nDaha sonra proje klasörümüze geri dönüp, referans genom dosyaları için kullancağımız klasörü oluşturalım:\nReferans genom dosyalarını, son dersimzideki klasörden alabilirsiniz.\nSon olarak diğer klasörlerimizi oluşturalım. Sonuçları bu klasörler içerisinde depolayacağız:",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RNA Dizileme Proje Örneği</span>"
    ]
  },
  {
    "objectID": "02-practice/02-rnaseq-project.html#klasör-yapısı",
    "href": "02-practice/02-rnaseq-project.html#klasör-yapısı",
    "title": "14  RNA Dizileme Proje Örneği",
    "section": "",
    "text": "Project\n    |\n    |\n    |-- data\n    |    |\n    |    |--- raw\n    |    |--- ref\n    |\n    |-- results\n         |\n         |--- processed\n         |--- alignment\n         |--- counts\n\n\n\n\n\n\n\n\n\nÖrnek ID\nKoşul\n\n\n\n\nSRR7029607\ncontrol\n\n\nSRR7029605\ncontrol\n\n\nSRR7405887\nzinc\n\n\nSRR7405886\nzinc\n\n\n\n\npwd\n\ncd\nmkdir Proje\ncd Proje\n\nmkdir data/raw\n\ncd data/raw\n\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR702/007/SRR7029607/SRR7029607.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR702/005/SRR7029605/SRR7029605.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR740/007/SRR7405887/SRR7405887.fastq.gz\nwget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR740/006/SRR7405886/SRR7405886.fastq.gz\n\n\ncd ../../\nmkdir data/raw\n\n\nmkdir -p results/processed\nmkdir -p results/alignment\nmkdir -p results/counts",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RNA Dizileme Proje Örneği</span>"
    ]
  },
  {
    "objectID": "02-practice/02-rnaseq-project.html#proje-kapsamında-eklenmesi-gerekenler",
    "href": "02-practice/02-rnaseq-project.html#proje-kapsamında-eklenmesi-gerekenler",
    "title": "14  RNA Dizileme Proje Örneği",
    "section": "14.2 Proje kapsamında eklenmesi gerekenler",
    "text": "14.2 Proje kapsamında eklenmesi gerekenler\nProjeniz aşağıda belirtilen adımları içermelidir:\n\n14.2.1 Fastq dosyası kalite kontrol sonuçları\nİlk olarak ham ve işlenmiş fastq dosyalarına ait FastQC raporlarını oluşturun. Bu dosyalar içerisinden aşağıdaki kısımlara odakalanabilirsiniz:\n\nNucleotide quality per base\nAdapter content\n\n\n\n14.2.2 Hizalama sonuçları\nBurada derste yaptığımız gibi bam dosyaları elde etmeniz gerekmektedir.\n\n\n14.2.3 RNAseq sayı matirisleri\nBu kısımda ise, results/counts klasörü içerisinde, incelediğimiz 4 farklı dosyaya ait count matrisler olmalı.",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>RNA Dizileme Proje Örneği</span>"
    ]
  },
  {
    "objectID": "02-practice/03-metagenomics.html",
    "href": "02-practice/03-metagenomics.html",
    "title": "15  Metagenomik pratik",
    "section": "",
    "text": "15.1 Proje klasörünün kurulumu\nÖncelikle çalışmada kullanacağımız kodları indirmek için depoyu çalışma alanımza klonlayalım:\nArdından kodlarımızın bulunduğu klasöre gidelim:\nÇalışma kapsamında kulanacağımız R kodlarını çalıştırmak için öncelikle conda ile R paketlerinin olduğu çevreyi kuralım. Ancak Metaphlan3 programı bu paket içerisinde yok. O programı siz sunucu üzerinde kurmalısınız. Conda paketi kurulumu için Bölüm A.1 kısmına bakabilirsiniz.\nÇalışma kapsamında kullanacağımız veri setini aşağıda https://zenodo.org/records/1025296 bağlantısından indirebilirsiniz. Bu veri setini indirin ve proje klasörü içerisinde Data olarak kaydediniz.\nBununla birlikte, Metaphlan programını çalıştırmak için gerekli olan ham fastq dosyaları ve ara adımlara ait bam ve Metaphlan dosyaları ise ayrı bir bağlantı olarak verilecektir.\nSon olarak çalışmada kullanacağımız çıktıları depolayacağımız klasörleri oluşturalım:",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Metagenomik pratik</span>"
    ]
  },
  {
    "objectID": "02-practice/03-metagenomics.html#proje-klasörünün-kurulumu",
    "href": "02-practice/03-metagenomics.html#proje-klasörünün-kurulumu",
    "title": "15  Metagenomik pratik",
    "section": "",
    "text": "git clone https://github.com/emrahkirdok/bioinformatics.git\n\ncd bioinformatics/02-practice/ancient-metagenomics\n\nconda create --file env/environment.yml\nconda activate harpix\n\n\n\nmkdir -p Results/metaphlan\nmkdir -p Results/BetaDiversity",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Metagenomik pratik</span>"
    ]
  },
  {
    "objectID": "02-practice/03-metagenomics.html#metaphlan3-ile-analiz",
    "href": "02-practice/03-metagenomics.html#metaphlan3-ile-analiz",
    "title": "15  Metagenomik pratik",
    "section": "15.2 Metaphlan3 ile analiz",
    "text": "15.2 Metaphlan3 ile analiz\nBu programı çalıştırmak için öncelikle elinizde Metaphlan3 veri tabanının olması gereklidir. Programı indirdikten sonra ilk çalıştırmanızda bu veri tabanı otomatik bir şekilde kuruluyor.\nBu kısımda kullanılacak koda bağlantıdan ulaşabilirsiniz.\nEn basit şekilde Metaphlan3 programını aşağıdaki şekilde çalıştırabilirsiniz:\nmetaphlan \n    --input_type fastq data/ble004-b1e1l1p1_ACCAACT_L003_ARmerged.180518_ST-E00201_0274_AHLCM3CCXY.all_unmapped.fastq.gz \n    -s Results/metaphlan/ble004-b1e1l1p1_ACCAACT_L003_ARmerged.180518_ST-E00201_0274_AHLCM3CCXY.all.sam \n    --nproc 20\n    --bowtie2out Results/metaphlan/le004-b1e1l1p1_ACCAACT_L003_ARmerged.180518_ST-E00201_0274_AHLCM3CCXY.all.bowtie2out \\\n    --bowtie2db ${DB} \n    -x ${DBNAME} &gt; Results/metaphlan/${BASE}_metaphlan.txt\n    \nEğer elimizde aynı örneğe ait olan birden fazla fastq dosyası varsa, bir for döngüsü yazabiliriz. Sakız makalesinde de bu süreç uygulandı. Önce her örneğe ait fastq dosyaları analiz edildi, daha elde edilen sam dosyaları birleştirilerek son bir analiz yapıldı:\nml bioinfo-tools MetaPhlAn3 samtools\n\n# Database location\nDB=/sw/bioinfo/MetaPhlAn3/3.0.8/rackham/lib/python3.8/site-packages/metaphlan/metaphlan_databases\n# Database name\nDBNAME=mpa_v30_CHOCOPhlAn_201901\n\nID=ble004\nFILES=sequences.txt\nTHREADS=10\n\n# Run metaphlan for every fastq file of a specific sample\nfor FASTQ in $(grep ${ID} ${FILES})\ndo\n    BASE=$(basename $FASTQ _unmapped.fastq.gz)\n    metaphlan --input_type fastq ${FASTQ} -s Results/metaphlan/${BASE}.sam --nproc ${THREADS} --bowtie2out Results/metaphlan/${BASE}.bowtie2out --bowtie2db ${DB} -x ${DBNAME} &gt; Results/metaphlan/${BASE}_metaphlan.txt\n\n    # Convert sam files to a bam file, and sort\n    # This makes the process fast   \n    samtools view -Sb Results/metaphlan/${BASE}.sam &gt; Results/metaphlan/${BASE}.bam\n    samtools sort Results/metaphlan/${BASE}.bam &gt; Results/metaphlan/${BASE}.sorted.bam\ndone\nDaha sonra bütün örneklere ait bam dosyalarını birleştirelim:\n# Collect all bam files for a specific sample   \nBAMS=\"\"\n\nfor FASTQ in $(grep ${ID} ${FILES})\ndo\n    BASE=$(basename $FASTQ _unmapped.fastq.gz)\n    BAMS=\"${BAMS} Results/metaphlan/${BASE}.sorted.bam\"\ndone\n\n# Merge all bam files that belongs to the specific sample\nsamtools merge -o Results/metaphlan/${ID}.bam ${BAMS}\nsamtools sort Results/metaphlan/${ID}.bam &gt; Results/metaphlan/${ID}.sorted.bam\n\n# Mark duplicates\nsamtools markdup -r Results/metaphlan/${ID}.sorted.bam  Results/metaphlan/${ID}.sorted.rmdup.bam\n\n# Metaphlan3 can read sam files. But it has to be a sam file, so convert it to a sam file\nsamtools view -h Results/metaphlan/${ID}.sorted.rmdup.bam &gt; Results/metaphlan/${ID}.sorted.rmdup.sam\n\n# Run metaphlan3 for the sam file\nmetaphlan --input_type sam Results/metaphlan/${ID}.sorted.rmdup.sam \\\n    -s ${ID}.sam --nproc ${THREADS} \\\n    --bowtie2out Results/metaphlan/${ID}.bowtie2out \\\n    --bowtie2db ${DB} -x ${DBNAME} &gt;  Results/metaphlan/${ID}_metaphlan.txt\nHer örneğe ait olan Metaphlan dosyalarını birleştirelim. Aşağıda gösterilen merge_metaphlan_tables.py kodu, metaphlan ile gelmekte. Ancak her zaman PATH içerisinde olmuyor:\nmerge_metaphlan_tables.py  Results/metaphlan/ble*_metaphlan.txt  Results/metaphlan/ble007_metaphlan.txt Results/metaphlan/ble008_metaphlan.txt &gt; Results/metaphlan/ble.txt\nSon olarak bu örnekler içerisindeki tür profillerini elde edelim:\ngrep -E \"s__|clade\" Results/metaphlan/ble.txt | sed 's/^.*s__//g' |cut -f1,3-8 | sed -e 's/clade_name/body_site/g' &gt; Results/metaphlan/ble.txt\nBu tür profillerini hclust2.py programı ile bir ısı grafiğine çevirelim. Burada opsiyonları değiştirin, her zaman güzel grafikler oluşmuyor. Ayrıca bu programı ayrıca kurmanız gereklidir:\n hclust2.py -i Results/metaphlan/ble.txt -o Results/metaphlan/abundance_heatmap_species.png --f_dist_f braycurtis --s_dist_f braycurtis --cell_aspect_ratio 0.5 -l --flabel_size 10 --slabel_size 10 --max_flabel_len 100 --max_slabel_len 100 --minv 0.1 --dpi 300",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Metagenomik pratik</span>"
    ]
  },
  {
    "objectID": "02-practice/03-metagenomics.html#alfa-ve-beta-çeşitlilik-analizleri",
    "href": "02-practice/03-metagenomics.html#alfa-ve-beta-çeşitlilik-analizleri",
    "title": "15  Metagenomik pratik",
    "section": "15.3 Alfa ve Beta çeşitlilik analizleri",
    "text": "15.3 Alfa ve Beta çeşitlilik analizleri\nÖrneklerimizde bulunan mikrobiyal içeriği incelemeye başlayabiliriz. Bunun için öncelikle iki tane dosyaya ihtiyacımız olacaktır:\n\nData/microbial-profile.txt: Antik diş taşları, diğer antik sakızlar, ve insan mikrobiyota projesinden elde edilmiş Metaphlan3 sonuçları\nData/microbial-metadata.txt: Bu örneklere ait metabilgiler\n\nGelin bu dosyaları inceleyelim:\nless -S Data/microbial-profile.txt\nless -S Data/microbial-metadata.txt\nİlk olarak örneklerde bulunan Phylum içeriklerine bakalım. Bu şekli oluşturmak için aşağıdaki komutu çalıştırmalısınız:\nRscript scripts/Figure-S1.R --profile Data/microbial-profile.txt --metadata Data/microbial-metadata.txt --out Results/BetaDiversity/Figure-S1.pdf\nBu işlemin sonucunda Şekil 15.1’de gösterilen şekil oluşmalı.\n\n\n\n\n\n\nŞekil 15.1: Antik sakız örnekleri ve karşılaştırma verisinin filum içerikleri\n\n\n\nÖrneklerin arasındaki Bray-Curtis uzaklıklarına bakalım şimdi. Bunun için aşağıdaki kodu çalıştıralım:\nRscript workflow/scripts/distance_plots.R --profile Data/microbial-profile.txt --metadata Data/microbial-metadata.txt --out1 Results/BetaDiversity/Bray_Curtis.pdf --out2 Results/BetaDiversity/Figure-S3.pdf\nBu kodu çalıştırdığımızda iki farklı şekil oluşacak. Şekil 15.2 bize, her örneğin sahip olduğu bray curtis uzaklıklarını vermektedir. Şekil 15.3 ise sadece sakız örneklerinin, diğer karşılaştırma örneklerine olan uzaklıklarını göstermektedir.\n\n\n\n\n\n\nŞekil 15.2: Çalışma kapsamında kullanıan bütün örneklerin sahip oldukları tipik Bray Curtis uzaklıkları\n\n\n\n\n\n\n\n\n\nŞekil 15.3: Sadece sakız örneklerinin, diğer karşılaştırma örneklerine olan uzaklıkları\n\n\n\nAncak bu şekiller çok rahat okunmuyor. Bir görselleştirme yöntemi olan Non-metric multidimensional scaling metodunu kullanarak, elimizdeki Bray-Curtis matrisini görselleştrelim (?fig-nmds). Aşağıdaki kodu çalıştırmamız gereklidir:\nRscript scripts/Figure-1.R --profile data/microbial-profile.txt --metadata data/microbial-metadata.txt --out Results/BetaDiversity/Figure-1.pdf\n\n\n\nNMDS yöntemi ile görselleştirilmiş Bray Curtis uzaklık matrisi",
    "crumbs": [
      "Pratikler",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Metagenomik pratik</span>"
    ]
  },
  {
    "objectID": "10-appendices/software-used.html",
    "href": "10-appendices/software-used.html",
    "title": "Ek A — Kullanılan Programlar",
    "section": "",
    "text": "A.1 Programların kurulumu\nProgramlar genel olarak Conda sistemi ile kurulacaktır. Kurmak için aşağıdaki komutları uygulayalım:\nAncak conda init komutunu çalıştırmayalım!\nSonra betiği silelim:\nConda’yı güncelleyelim:\nArtık conda’yı kullanabilmek için TRUBA sistemine girdiğinizde ilk olarak aşağıdaki komutu çalıştırmanız gerekecektir:\nSonra ilk çevremizi kuralım:",
    "crumbs": [
      "Ekler",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Kullanılan Programlar</span>"
    ]
  },
  {
    "objectID": "10-appendices/software-used.html#sec-kurulum",
    "href": "10-appendices/software-used.html#sec-kurulum",
    "title": "Ek A — Kullanılan Programlar",
    "section": "",
    "text": "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\nbash Miniconda3-latest-Linux-x86_64.sh\n\n\nrm Miniconda3-latest-Linux-x86_64.sh\n\neval \"$(/truba/home/$USER/miniconda3/bin/conda shell.bash hook)\"\nconda update conda\n\neval \"$(/truba/home/$USER/miniconda3/bin/conda shell.bash hook)\"\n\nconda create --name quality-control\nconda activate quality-control\n\nconda install fastqc cutadapt -c bioconda",
    "crumbs": [
      "Ekler",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Kullanılan Programlar</span>"
    ]
  },
  {
    "objectID": "10-appendices/software-used.html#fastq-işleme",
    "href": "10-appendices/software-used.html#fastq-işleme",
    "title": "Ek A — Kullanılan Programlar",
    "section": "A.2 FASTQ işleme",
    "text": "A.2 FASTQ işleme\n\nfastQC\ncutadapt",
    "crumbs": [
      "Ekler",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Kullanılan Programlar</span>"
    ]
  },
  {
    "objectID": "10-appendices/software-used.html#dna-hizalama",
    "href": "10-appendices/software-used.html#dna-hizalama",
    "title": "Ek A — Kullanılan Programlar",
    "section": "A.3 DNA hizalama",
    "text": "A.3 DNA hizalama\n\nbwa\nsamtools",
    "crumbs": [
      "Ekler",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Kullanılan Programlar</span>"
    ]
  }
]